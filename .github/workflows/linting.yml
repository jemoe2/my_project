name: Professional CI Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  quality-gate:
    name: Quality Gate
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest]
      fail-fast: false

    steps:
      - name: Validate file encodings
        run: |
          find . -type f -name "*.py" -exec file --mime-encoding {} \; | grep -v 'utf-8'
          if [ $? -eq 0 ]; then exit 1; fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run static analysis
        run: |
          ruff check . --config=pyproject.toml --statistics --fix
          black --check --diff .
          mypy --strict --show-error-codes .
          pylint $(git ls-files '*.py')

      - name: Security audit
        run: |
          bandit -r . -ll -c pyproject.toml
          detect-secrets scan --baseline .secrets.baseline

      - name: Run tests with coverage
        run: pytest --cov=my_project --cov-report=xml --cov-fail-under=90

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          verbose: true

  lint-and-format:
    name: Linting and Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          pip install black autopep8 flake8 pylint ruff
      - name: Run Black and Autopep8
        run: |
          black . --check
          autopep8 --in-place --recursive .
        continue-on-error: ${{ false }}  # Or remove if not needed
      - name: Run Flake8
        run: flake8 .
      - name: Run Ruff
        run: ruff . --fix
